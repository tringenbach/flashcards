{"version":3,"sources":["audio/right.mp3","logo.svg","audio/wrong.mp3","App.js","reportWebVitals.js","index.js"],"names":["RightAudio","autoplay","src","right","WrongAudio","wrong","App","problems","rv","i","j","push","problem","solution","getAdditionProblems","useState","max","length","Math","floor","random","getRandomProblem","answered","setAnswered","userSolution","setUserSolution","className","style","fontSize","onSubmit","autoFocus","type","size","onInput","e","target","value","controls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAAe,GCAA,I,MDAA,IAA0B,mCEA1B,MAA0B,kC,OC2BzC,SAASA,IACP,OAAO,uBAAOC,SAAS,OAAOC,IAAMC,IAEtC,SAASC,IACP,OAAO,uBAAOH,SAAS,OAAOC,IAAMG,IA0CvBC,MAvCf,WACE,IAAMC,EA5BR,WAEE,IADA,IAAMC,EAAK,GACFC,EAAI,EAAGA,GAAK,GAAIA,IACvB,IAAK,IAAIC,EAAI,EAAGA,GAAK,GAAIA,IACvBF,EAAGG,KAAK,CACNC,QAAQ,GAAD,OAAKH,EAAL,cAAYC,GACnBG,SAAUJ,EAAIC,IAIpB,OAAOF,EAkBUM,GACjB,EAAgCC,mBAhBlC,SAA0BR,GACxB,IACMS,EAAMT,EAASU,OAErB,OAAOV,EADOW,KAAKC,MAAMD,KAAKE,UAAYJ,EAF9B,OAe6BK,CAAiBd,IAA1D,mBAAQK,EAAR,KACA,GADA,KACkCG,oBAAS,IAA3C,mBAAQO,EAAR,KAAkBC,EAAlB,KACA,EAA0CR,mBAAS,MAAnD,mBAAQS,EAAR,KAAsBC,EAAtB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SAEE,oBAAGC,MAAO,CAAEC,SAAU,QAAtB,UACGhB,EAAQA,QADX,MAEKU,GACH,sBAAMO,SAAU,kBAAMN,GAAY,IAAlC,SACE,uBAAOO,WAAS,EAACC,KAAK,OAAOC,KAAM,EAAGC,QAAS,SAAAC,GAAC,OAAIT,EAAgBS,EAAEC,OAAOC,YAG7Ed,GAAY,qCAAQV,EAAQC,YAC3BS,GAAYE,GAAgBZ,EAAQC,UAAa,0CAAO,cAACb,EAAD,OACxDsB,GAAYE,GAAgBZ,EAAQC,UAAa,0CAAO,cAACT,EAAD,YAK/D,iCACE,+CACS,uBAAOiC,UAAQ,EAACnC,IAAMC,OAE/B,+CACS,uBAAOkC,UAAQ,EAACnC,IAAMG,OAE/B,oDACc,uBAAOgC,UAAQ,EAACnC,IAAMG,cCtD7BiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2bb3d498.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/right.3e9687d7.mp3\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/wrong.4ab84dbd.mp3\";","import { useState, useRef } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport right from './audio/right.mp3';\nimport wrong from './audio/wrong.mp3'\n\n\nfunction getAdditionProblems() {\n  const rv = [];\n  for (let i = 0; i <= 10; i++) {\n    for (let j = 0; j <= 10; j++) {\n      rv.push({\n        problem: `${i} + ${j}`,\n        solution: i + j\n      });\n    }\n  }\n  return rv;\n}\n\nfunction getRandomProblem(problems) {\n  const min = 0;\n  const max = problems.length;\n  const index = Math.floor(Math.random() * (max - min) + min); \n  return problems[index];\n}\n\nfunction RightAudio() {\n  return <audio autoplay=\"true\" src={ right } />\n}\nfunction WrongAudio() {\n  return <audio autoplay=\"true\" src={ wrong } />\n}\n\nfunction App() {\n  const problems = getAdditionProblems();\n  const [ problem, setProblem ] = useState(getRandomProblem(problems));\n  const [ answered, setAnswered ] = useState(false);\n  const [ userSolution, setUserSolution ] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p style={{ fontSize: '40px'}}>\n          {problem.problem} = \n          { !answered &&\n          <form onSubmit={() => setAnswered(true)}>\n            <input autoFocus type=\"text\" size={2} onInput={e => setUserSolution(e.target.value)}/>\n          </form>\n          }\n          { answered && <span> {problem.solution}</span>}\n          { (answered && userSolution == problem.solution) && <span>✅<RightAudio /></span>}\n          { (answered && userSolution != problem.solution) && <span>❌<WrongAudio /></span>}\n\n\n        </p>\n      </header>\n      <main>\n        <div>\n          Right ✅<audio controls src={ right } />\n        </div>\n        <div>\n          Wrong ❌<audio controls src={ wrong } />\n        </div>\n        <div>\n          Times up! ⏰ <audio controls src={ wrong } />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}